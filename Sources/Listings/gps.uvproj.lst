C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GPS_UVPROJ
OBJECT MODULE PLACED IN .\Objects\gps.uvproj.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE gps.uvproj.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\GPS 3.0) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\gps.uvproj.lst) TABS(2) OBJECT(.\Objects\gps.uvproj.obj)

line level    source

   1          /*
   2          --------------------------------------------------------------------
   3          --------------------------------------------------------------------
   4          * gps.c
   5          * main.c
   6          * get date from serial
   7          * display the data
   8          * 
   9          --------------------------------------------------------------------
  10          --------------------------------------------------------------------
  11          */
  12          #include <REG52.H>
  13          #include <stdio.h>
  14          #include <intrins.h>
  15          #include <lcd1602.h>
  16          #include <uart.h>
  17          #include <delay.h>
  18          #include "string.h"
  19          #include <stdlib.h>
  20          
  21          
  22          unsigned char  flag_rec=0;    //ReceiveDataFlag
  23          unsigned char num_rec=0;      //count flag
  24                                     
  25          
  26          //char code TIME_AREA= 8;   //Ê±Çø
  27          unsigned char flag_data;  //date flag
  28          
  29          //GPS date array
  30          //only displaty cmd $GPGGA information
  31          unsigned char JD[16];   //longitude
  32          unsigned char JD_a;   //longitude direction
  33          unsigned char WD[15];   //latitude
  34          unsigned char WD_a;   //latitude direction
  35          unsigned char date[6];    //date
  36          unsigned char time[6];    //date
  37          unsigned char time1[6];   //date
  38          unsigned char speed[5]={'0','0','0','0','0'};   //speed
  39          unsigned char high[6];    //height
  40          unsigned char angle[5];   //azimuth
  41          unsigned char use_sat[2]; //satellinte count
  42          unsigned char total_sat[2]; //total satellinte
  43          unsigned char lock;     //location state
  44          
  45          //date handing variable
  46          unsigned char seg_count;  //comma counter
  47          unsigned char dot_count;  //decimal point counter
  48          unsigned char byte_count; //bit counter
  49          unsigned char cmd_number; //cmd mode
  50          unsigned char mode;     //0£ºend up £¬1£ºcmd mode£¬2£ºdata mode
  51          unsigned char buf_full;   //1£ºdate effective 0£ºdate fault
  52          unsigned char cmd[5];   //store cmd mode
  53          
  54          //serial disconnect timer
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 2   

  55          unsigned  long int tt=0;
  56          
  57          //main
  58          void main () 
  59          { 
  60   1        int jd_second,wd_second;  //intermediate variable
  61   1        init_uart();       //initial serial
  62   1        lcd_init() ;       //initial lcd1602
  63   1        delay(200);
  64   1        LCD_Write_String(0,0,"Please Waiting...");   //display "Please Waiting" when it is boot up
  65   1        delay(200);
  66   1        delay(200);
  67   1        delay(200);
  68   1        delay(200);
  69   1        delay(200);
  70   1        delay(200);
  71   1        delay(200);
  72   1        delay(200);
  73   1        delay(200);
  74   1        delay(200);                             //delayed for display
  75   1        write_com(0x01);      //clear screen
  76   1        while(1)
  77   1        {
  78   2          tt++;
  79   2          if(tt>10000)
  80   2            {
  81   3              tt=10000;
  82   3              write_com(0x01);
  83   3              LCD_Write_String(3,0,"No Data!");
  84   3              LCD_Write_String(3,1,"No Data!");
  85   3              delay(200);
  86   3              delay(200);
  87   3              delay(200);
  88   3              delay(200);
  89   3              delay(200);
  90   3             }
  91   2           if(flag_rec==1)             //get gps date
  92   2            {
  93   3              flag_rec=0;               //clear flag
  94   3              if (lock==1)              //get location
  95   3              {  
  96   4                //
  97   4                LCD_Write_String(0,0,"JinDu:");    //display "Jindu:"
  98   4                LCD_Write_String(6,0,JD);           //display date
  99   4                LCD_Write_String(9,0,".");           //decimal 
 100   4                LCD_Write_String(10,0,JD+3);           //minute
 101   4      
 102   4                jd_second=60*atof((char *)(JD+5));     //seconds
 103   4                LCD_Write_Char(13,0,jd_second/10+'0');  //chang number to char
 104   4                LCD_Write_Char(14,0,jd_second%10+'0');  
 105   4                LCD_Write_Char(15,0,' ');                //filling space
 106   4      
 107   4                delay(200);                         //protect flash
 108   4                LCD_Write_String(0,1,"Weidu:");     //display next row
 109   4                LCD_Write_String(6,1,WD);
 110   4                LCD_Write_String(8,1,"."); 
 111   4                LCD_Write_String(9,1,WD+2);           //decimal point
 112   4                wd_second=60*atof((char *)(WD+4));
 113   4                LCD_Write_Char(12,1,wd_second/10+'0');
 114   4                LCD_Write_Char(13,1,wd_second%10+'0');
 115   4                LCD_Write_String(14,1,"  ");
 116   4                delay(200);
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 3   

 117   4             }
 118   3            }
 119   2           }
 120   1          }
 121          //serial interruupt service function
 122          void ser_int (void) interrupt 4
 123          {
 124   1        
 125   1        unsigned char tmp;
 126   1        if(RI)
 127   1        {
 128   2          tt=0;
 129   2          RI=0;
 130   2          tmp=SBUF;            //receive date from buffer
 131   2          switch(tmp)   //if $GPGGA,$GNGSW,$GNRMC,get data then processing it
 132   2          {
 133   3            //date start with $
 134   3            case '$':
 135   3              cmd_number=0;   //clear cmd mode
 136   3              mode=1;       //choice cmd receive mode
 137   3              byte_count=0;   //clear bit counter 
 138   3              flag_data=1;     //set data flag
 139   3              flag_rec=1;   //set data receive flag
 140   3            break;
 141   3      
 142   3            case ',':         //Eg:$GNRMC,134645.000,A,2603.964436,N,11912.410232,E,0.000,15.744,030718,,E,A*0B
 143   3              seg_count++;    //comma counter increase
 144   3              byte_count=0;
 145   3              break;
 146   3      
 147   3            case '*':
 148   3              switch(cmd_number)
 149   3              {
 150   4                case 1:
 151   4                  buf_full|=0x01;   //00000001
 152   4                  break;
 153   4                case 2:
 154   4                  buf_full|=0x02;  //00000010
 155   4                  break;
 156   4                case 3:
 157   4                  buf_full|=0x04;  //00000100
 158   4                  break;
 159   4              }
 160   3      
 161   3              mode=0;         //clear mode
 162   3              break;
 163   3            default:
 164   3      
 165   3      // receive date cmd
 166   3              if(mode==1) 
 167   3              {
 168   4                cmd[byte_count]=tmp;      //get date and store buffer
 169   4                if(byte_count>=4)          //overlook cmd which less 4 bit
 170   4                {     
 171   5                  if(cmd[0]=='G')           //first char 
 172   5                  {
 173   6                    if(cmd[1]=='N')
 174   6                    {
 175   7                      if(cmd[2]=='G')
 176   7                      {
 177   8                        if(cmd[3]=='G')
 178   8                        {
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 4   

 179   9                          if(cmd[4]=='A')//judge $GNGGA
 180   9                          {
 181  10                            cmd_number=1;      //data type
 182  10                            mode=2;            //date receive
 183  10                            seg_count=0;       //comma counter clear
 184  10                            byte_count=0;      //bit counter clear
 185  10                          }
 186   9                        }
 187   8                        else if(cmd[3]=='S')       //cmd $GNGSV
 188   8                        {
 189   9                          if(cmd[4]=='V')
 190   9                          {
 191  10                            cmd_number=2;
 192  10                            mode=2;                //get data
 193  10                            seg_count=0;
 194  10                            byte_count=0;
 195  10                          }
 196   9                        }
 197   8                      }
 198   7                      else if(cmd[2]=='R')   //cmd $GNRMC
 199   7                      {
 200   8                        if(cmd[3]=='M')
 201   8                        {
 202   9                          if(cmd[4]=='C')
 203   9                          {
 204  10                            cmd_number=3;
 205  10                            mode=2;         //store data
 206  10                            seg_count=0;
 207  10                            byte_count=0;
 208  10                          }
 209   9                        }
 210   8                      }
 211   7                    }
 212   6                  }
 213   5                }
 214   4              }
 215   3      //date processing
 216   3              else if(mode==2)
 217   3              {
 218   4                
 219   4                switch (cmd_number)
 220   4                {
 221   5                  case 1:       //get and store data,$GPGGA,[],[],[],[],[],[],[],[],[].....
 222   5                    switch(seg_count)
 223   5                    {
 224   6                      case 2:   //Î³¶È´¦Àí
 225   6                        if(byte_count<9)
 226   6                        {
 227   7                          WD[byte_count]=tmp;
 228   7                        }
 229   6                        break;
 230   6                      case 3:   //Î³¶È·½Ïò´¦Àí
 231   6                        if(byte_count<1)
 232   6                        {
 233   7                          WD_a=tmp;
 234   7                        }
 235   6                        break;
 236   6                      case 4:   //¾­¶È´¦Àí
 237   6                        if(byte_count<10)
 238   6                        {
 239   7                          JD[byte_count]=tmp; //´ÓµÚÈýÎ»¿ªÊ¼ÏÔÊ¾
 240   7                        }
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 5   

 241   6                        break;
 242   6                      case 5:   //¾­¶È·½Ïò´¦Àí
 243   6                        if(byte_count<1)
 244   6                        {
 245   7                          JD_a=tmp;
 246   7                        }
 247   6                        break;
 248   6                      case 6:   //¶¨Î»ÅÐ¶Ï
 249   6                        if(byte_count<1)
 250   6                        {
 251   7                          lock=tmp;
 252   7                        }
 253   6                        break;
 254   6                      case 7:   //¶¨Î»Ê¹ÓÃµÄÎÀÐÇÊý
 255   6                        if(byte_count<2)
 256   6                        {
 257   7                          use_sat[byte_count]=tmp;
 258   7                        }
 259   6                        break;
 260   6                      case 9:   //¸ß¶È´¦Àí
 261   6                        if(byte_count<6)
 262   6                        {
 263   7                          high[byte_count]=tmp;
 264   7                        }
 265   6                        break;
 266   6                    }
 267   5                    break;
 268   5      
 269   5      //
 270   5                  case 2:       //ÀàÐÍ2Êý¾Ý½ÓÊÕ¡£GPGSV
 271   5                    switch(seg_count)
 272   5                    {
 273   6                      case 3:   //Ìì¿ÕÖÐµÄÎÀÐÇ×ÜÊý
 274   6                        if(byte_count<2)
 275   6                        {
 276   7                          total_sat[byte_count]=tmp;
 277   7                        }
 278   6                        break;
 279   6                    }
 280   5                    break;
 281   5      
 282   5      
 283   5      //ÀàÐÍ3Î´Ê¹ÓÃ£¬´ÓÖ®Ç°ÃüÁî¾ÍÒÑ¾­»ñÈ¡Êý¾Ý
 284   5                  case 3:       //ÀàÐÍ3Êý¾Ý½ÓÊÕ¡£GPRMC [UTC] [×´Ì¬] [Î³¶È] [°ëÇò] [¾­¶È] [] [] [] [] [] [] []
 285   5                    switch(seg_count)
 286   5                    {
 287   6                      case 1:   //Ê±¼ä´¦Àí
 288   6                        if(byte_count<6)
 289   6                        {       
 290   7                          time[byte_count]=tmp; 
 291   7                        }
 292   6                        break;
 293   6                      case 2:   //¶¨Î»ÅÐ¶Ï            
 294   6                        if(byte_count<1)
 295   6                        {
 296   7                          if (tmp=='V') {lock=0;}
 297   7                          else
 298   7                          {
 299   8                            lock=1;
 300   8                           }
 301   7                        }
 302   6                        break;
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 6   

 303   6                      case 3:   //Î³¶È´¦Àí            
 304   6      //                  if(byte_count<9)
 305   6      //                  {
 306   6      //                    WD[byte_count+2]=tmp;ÖØ¸´
 307   6      //                  }
 308   6                        break;
 309   6                      case 4:   //Î³¶È·½Ïò´¦Àí            
 310   6                        if(byte_count<1)
 311   6                        {
 312   7                          WD_a=tmp;
 313   7                        }
 314   6                        break;
 315   6                      case 5:   //¾­¶È´¦Àí            
 316   6      //                  if(byte_count<10)
 317   6      //                  {
 318   6      //                    JD[byte_count+4]=tmp;  //Ç°Á½Î»ÓÃÓÚÏÔÊ¾¡®j¡¯¡®£º¡¯
 319   6      //                  }
 320   6                        break;
 321   6                      case 6:   //¾­¶È·½Ïò´¦Àí            
 322   6                        if(byte_count<1)
 323   6                        {
 324   7                          JD_a=tmp;
 325   7                        }
 326   6                        break;
 327   6                      case 7:   //ËÙ¶È´¦Àí            
 328   6                        if(byte_count<5)
 329   6                        {
 330   7                          speed[byte_count]=tmp;
 331   7                        }
 332   6                        break;
 333   6                      case 8:   //·½Î»½Ç´¦Àí            
 334   6                        if(byte_count<5)
 335   6                        {
 336   7                          angle[byte_count]=tmp;
 337   7                        }
 338   6                        break;
 339   6                      case 9:   //·½Î»½Ç´¦Àí            
 340   6                        if(byte_count<6)
 341   6                        {
 342   7                          date[byte_count]=tmp;
 343   7                        }
 344   6                        break;
 345   6      
 346   6                    }
 347   5                    break;
 348   5                }
 349   4              }
 350   3              byte_count++;   //½ÓÊÕÊýÎ»¼Ó1
 351   3              break;
 352   3          }
 353   2        }
 354   1      }
 355          
 356          
 357          
 358          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1116    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.54   GPS_UVPROJ                                                            01/20/2019 21:08:38 PAGE 7   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     90       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
